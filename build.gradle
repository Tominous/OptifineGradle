buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: "com.gradle.plugin-publish"

group = 'com.github.aucguy.optifinegradle'
version = '0.0.0'
archivesBaseName = 'OptifineGradle'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'

repositories {
    mavenLocal()
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
        // because Srg2Source needs an eclipse dependency.
        name = "eclipse"
        url = "https://repo.eclipse.org/content/groups/eclipse/"
    }
    jcenter() // get as many deps from here as possible
    mavenCentral()

    // because SS and its snapshot
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }


    // because of the GradleStart stuff
    maven {
        name = "mojang"
        url = "https://libraries.minecraft.net/"
    }
}

dependencies {
    compile gradleApi()

    // moved to the beginning to be the overrider
    compile 'org.ow2.asm:asm-debug-all:6.0_BETA'
    compileOnly 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    testCompile 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	compileOnly 'net.minecraftforge:forgeflower:1.0.342-SNAPSHOT' // Fernflower Forge edition
	testCompile 'net.minecraftforge:forgeflower:1.0.342-SNAPSHOT' // Fernflower Forge edition

	//here until unmodified classes are deleted
	compileOnly 'com.mojang:authlib:1.5.16'
    compileOnly "net.minecraft:launchwrapper:1.11"

    compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:1.1.3-2"
    testCompile 'junit:junit:4.12'

    compile 'com.google.guava:guava:18.0'

    compile 'net.sf.opencsv:opencsv:2.3' // reading CSVs.. also used by SpecialSource
    compile 'com.cloudbees:diff4j:1.1' // for difing and patching
    compile 'com.github.abrarsyed.jastyle:jAstyle:1.3' // formatting
    compile 'net.sf.trove4j:trove4j:2.1.0' // because its awesome.

    compile 'com.github.jponge:lzma-java:1.3' // replaces the LZMA binary
    compile 'com.nothome:javaxdelta:2.0.1' // GDIFF implementation for BinPatches
    compile 'com.google.code.gson:gson:2.2.4' // Used instead of Argo for buuilding changelog.
    compile 'com.github.tony19:named-regexp:0.2.3' // 1.7 Named regexp features

    // because curse
    compile 'org.apache.httpcomponents:httpclient:4.3.3'
    compile 'org.apache.httpcomponents:httpmime:4.3.3'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14'
}

compileJava {
	options.deprecation = true
	//options.compilerArgs += ["-Werror"]
	//options.compilerArgs += ["-Werror", "-Xlint:unchecked"]
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'forgegradle.version.txt'
        expand 'version': project.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'forgegradle.version.txt'
    }
}

jar {
    manifest {
        attributes 'version':project.version
        attributes 'javaCompliance': project.targetCompatibility
        attributes 'group':project.group
        attributes 'Implementation-Version': project.version + getGitHash()
    }
}

javadoc {
	classpath += configurations.compileOnly

    // linked javadoc urls.. why not...
    options.addStringOption 'link', 'https://gradle.org/docs/current/javadoc/'
    options.addStringOption 'link', 'http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc'
    options.addStringOption 'link', 'http://asm.ow2.org/asm50/javadoc/user/'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc
    classifier = "javadoc"
}

artifacts {
    archives jar
    archives javadocJar
}

test {
    if (project.hasProperty("filesmaven")) // disable this test when on the forge jenkins
        exclude "**/ExtensionMcpMappingTest*"
}

pluginBundle {
    website = 'http://www.gradle.org/' //TODO https?
    vcsUrl = 'https://github.com/MinecraftForge/ForgeGradle' //TODO
    description = 'Gradle plugin for optifine decompilation'
    tags = ['forge', 'minecraft', 'minecraftforge', 'sponge', 'mcp', 'optifine']

    plugins {
        patcher {
            id = 'com.github.aucguy.optifinegradle.Patcher'
            displayName = 'Minicraft Patcher Plugin'
        }
        forge {
            id = 'com.github.aucguy.optifinegradleUser'
            displayName = 'MincraftForge Mod Development Plugin'
        }
    }
}

// write out version so its convenient for doc deployment
file('build').mkdirs()
file('build/version.txt').text = version;

def getGitHash() {
    def process = 'git rev-parse --short HEAD'.execute()
    process.waitFor()
    return '-' + (process.exitValue() ? 'unknown' : process.text.trim())
}
