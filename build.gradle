buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: "com.gradle.plugin-publish"

group = 'com.github.aucguy.optifinegradle'
version = '0.0.0'
archivesBaseName = 'OptifineGradle'
targetCompatibility = '1.8'
sourceCompatibility = '1.8'

repositories {
    mavenLocal()
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
        // because Srg2Source needs an eclipse dependency.
        name = "eclipse"
        url = "https://repo.eclipse.org/content/groups/eclipse/"
    }
    jcenter() // get as many deps from here as possible
    mavenCentral()

    // because SS and its snapshot
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }


    // because of the GradleStart stuff
    maven {
        name = "mojang"
        url = "https://libraries.minecraft.net/"
    }
}

dependencies {
    compile gradleApi()
    compile group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '2.3-SNAPSHOT'
    compile group: 'org.ow2.asm', name: 'asm', version: '5.0.3'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'net.sf.opencsv', name: 'opencsv', version: '2.3'
    compile group: 'com.github.tony19', name: 'named-regexp', version: '0.2.3'

	//shaded in ForgeGradle
	//compile group: 'net.md-5', name: 'SpecialSource', version: '1.8.2'
}

compileJava {
	options.deprecation = true
}

jar {
    manifest {
        attributes 'version': project.version
        attributes 'javaCompliance': project.targetCompatibility
        attributes 'group': project.group
        attributes 'Implementation-Version': project.version + getGitHash()
    }
}

javadoc {
	classpath += configurations.compileOnly

    // linked javadoc urls.. why not...
    options.addStringOption 'link', 'https://gradle.org/docs/current/javadoc/'
    options.addStringOption 'link', 'http://docs.guava-libraries.googlecode.com/git-history/v18.0/javadoc'
    options.addStringOption 'link', 'http://asm.ow2.org/asm50/javadoc/user/'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc
    classifier = "javadoc"
}

artifacts {
    archives jar
    archives javadocJar
}

test {
    if (project.hasProperty("filesmaven")) // disable this test when on the forge jenkins
        exclude "**/ExtensionMcpMappingTest*"
}

pluginBundle {
    website = 'http://www.gradle.org/'
    //vcsUrl = 'https://github.com/MinecraftForge/ForgeGradle'
    description = 'Optifine decompiler'
    tags = ['forge', 'minecraft', 'minecraftforge', 'optifine', 'mcp']

    plugins {
        optifinePatcher {
            id = 'com.github.aucguy.optifinegradle.optifinePatcher'
            displayName = 'Minecraft Patcher Plugin with Optifine'
        }
        optifineUser {
            id = 'com.github.aucguy.optifinegradle.optifineUser'
            displayName = 'MincraftForge Mod Development Plugin with Optifine'
        }
    }
}

// write out version so its convenient for doc deployment
file('build').mkdirs()
file('build/version.txt').text = version;

def getGitHash() {
    def process = 'git rev-parse --short HEAD'.execute()
    process.waitFor()
    return '-' + (process.exitValue() ? 'unknown' : process.text.trim())
}
