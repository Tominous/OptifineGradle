{
    /** Javadoc For: field_1_a */
    public static boolean field_1_a = true;
    /** Javadoc For: field_2_a */
    static boolean field_2_a;
    /** Javadoc For: field_3_a */
    boolean field_3_a;
    /** Javadoc For: field_4_a */
    boolean[] field_4_a;
    /** Javadoc For: field_5_a */
    List<Test> field_5_a;
    /** Javadoc For: field_6_a */
    private final Map<String, T> field_6_a;
    /** Javadoc For: field_7_a */
    Map<> field_7_a;
    /** Javadoc For: field_8_a */
    Map<,> field_8_a; //This will get javadocs even tho its invalid cuz we dont care if its valid just that it grabs all the generics
    /** Javadoc For: field_9_a */
    Map<Test[], Bob[]>[] field_9_a;
    /** Javadoc For: field_10_a */
    Map<? extends Object & Turtle> field_10_a;
    /** Javadoc For: field_11_a */
    @Nullable
    Object field_11_a;



    /**
     * Javadoc For: func_1_a
     */
    public static void func_1_a();
    /**
     * Javadoc For: func_2_a
     */
    static boolean  func_2_a();
    /**
     * Javadoc For: func_3_a
     */
    boolean func_3_a();
    /**
     * Javadoc For: func_4_a
     */
    boolean[] func_4_a();
    /**
     * Javadoc For: func_5_a
     */
    List<Test> func_5_a();
    /**
     * Javadoc For: func_6_a
     */
    Map<Test, Bob> func_6_a();
    /**
     * Javadoc For: func_7_a
     */
    Map<> func_7_a();
    /**
     * Javadoc For: func_8_a
     */
    Map<,> func_8_a();
    /**
     * Javadoc For: func_9_a
     */
    Map<Test[], Bob[]>[] func_9_a();
    /**
     * Javadoc For: func_10_a
     */
    Map<? extends Object & Turtle> func_10_a();
    /**
     * Javadoc For: func_11_a
     */
    public static <T extends Enum<T> & IStringSerializable> PropertyEnum<T> func_11_a();
    /**
     * Javadoc For: func_12_a
     */
    @Nullable
    Object func_12_a();



    // Non-SRG methods (e.g. from non-obf interfaces) should not get docs
    public int size();
    public List<? extends T> findAll(Class<T> clazz);

    // Methods and fields in methods shouldn't get docs
    boolean foo() {
        someVar = func_2_a();
        func_2_a().aField++;
        test(func_2_a());
        return func_2_a();
    }
    boolean bar() {
        someVar = field_2_a;
        test(field_2_a);
        field_2_a++;
        return field_2_a;
    }



    // Inner and anonymous classes
    class Nested {
        /** Javadoc For: field_101_a */
        int field_101_a;
        /**
         * Javadoc For: func_101_a
         */
        int func_101_a();
    }

    Object inner() {
        class MethodNested {
            /** Javadoc For: field_102_a */
            boolean field_102_a;
            /**
             * Javadoc For: func_102_a
             */
            boolean func_102_a();
        }
        return new Object() {
            /** Javadoc For: field_103_a */
            boolean field_103_a;
            /**
             * Javadoc For: func_103_a
             */
            boolean func_103_a();
        }
    }
}