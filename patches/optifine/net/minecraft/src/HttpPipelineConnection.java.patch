--- ../src-base/minecraft/net/minecraft/src/HttpPipelineConnection.java
+++ ../src-work/minecraft/net/minecraft/src/HttpPipelineConnection.java
@@ -249,177 +249,183 @@
         {
             return p_normalizeUrl_1_;
         }
-        else if (p_normalizeUrl_1_.startsWith("
-                                              return "http: " + p_normalizeUrl_1_;
-                                          } else {
-                                              String s = p_normalizeUrl_2_.getHost();
-                                              if(p_normalizeUrl_2_.getPort() != 80) {
-                                              s = s + ": " + p_normalizeUrl_2_.getPort();
-                                          }
-                                              if(p_normalizeUrl_1_.startsWith(" / ")) {
-                                              return "http://" + s + p_normalizeUrl_1_;
-                                          } else
-{
-    String s1 = p_normalizeUrl_2_.getFile();
-        int i = s1.lastIndexOf("/");
-        return i >= 0 ? "http://" + s + s1.substring(0, i + 1) + p_normalizeUrl_1_ : "http://" + s + "/" + p_normalizeUrl_1_;
+        else if (p_normalizeUrl_1_.startsWith("//"))
+        {
+        	return "http: " + p_normalizeUrl_1_;
+        }
+        else
+        {
+        	String s = p_normalizeUrl_2_.getHost();
+            if(p_normalizeUrl_2_.getPort() != 80)
+            {
+            	s = s + ": " + p_normalizeUrl_2_.getPort();
+            }
+            
+            if(p_normalizeUrl_1_.startsWith(" / ")) {
+            	return "http://" + s + p_normalizeUrl_1_;
+            }
+            else
+            {
+            	String s1 = p_normalizeUrl_2_.getFile();
+            	int i = s1.lastIndexOf("/");
+            	return i >= 0 ? "http://" + s + s1.substring(0, i + 1) + p_normalizeUrl_1_ : "http://" + s + "/" + p_normalizeUrl_1_;
+            }
+        }
     }
-}
-}
 
-private void checkResponseHeader(HttpResponse p_checkResponseHeader_1_)
-{
-    String s = p_checkResponseHeader_1_.getHeader("Connection");
-
-    if (s != null && !s.toLowerCase().equals("keep-alive"))
+    private void checkResponseHeader(HttpResponse p_checkResponseHeader_1_)
     {
-        this.terminate(new EOFException("Connection not keep-alive"));
-    }
+    	String s = p_checkResponseHeader_1_.getHeader("Connection");
 
-    String s1 = p_checkResponseHeader_1_.getHeader("Keep-Alive");
+    	if (s != null && !s.toLowerCase().equals("keep-alive"))
+    	{
+    		this.terminate(new EOFException("Connection not keep-alive"));
+    	}
 
-    if (s1 != null)
-    {
-        String[] astring = Config.tokenize(s1, ",;");
+    	String s1 = p_checkResponseHeader_1_.getHeader("Keep-Alive");
 
-        for (int i = 0; i < astring.length; ++i)
-        {
-            String s2 = astring[i];
-            String[] astring1 = this.split(s2, '=');
+    	if (s1 != null)
+    	{
+    		String[] astring = Config.tokenize(s1, ",;");
 
-            if (astring1.length >= 2)
-            {
-                if (astring1[0].equals("timeout"))
-                {
-                    int j = Config.parseInt(astring1[1], -1);
+    		for (int i = 0; i < astring.length; ++i)
+    		{
+    			String s2 = astring[i];
+    			String[] astring1 = this.split(s2, '=');
 
-                    if (j > 0)
-                    {
-                        this.keepaliveTimeoutMs = (long)(j * 1000);
-                    }
-                }
+    			if (astring1.length >= 2)
+    			{
+    				if (astring1[0].equals("timeout"))
+    				{
+    					int j = Config.parseInt(astring1[1], -1);
 
-                if (astring1[0].equals("max"))
-                {
-                    int k = Config.parseInt(astring1[1], -1);
+    					if (j > 0)
+    					{
+    						this.keepaliveTimeoutMs = (long)(j * 1000);
+    					}
+    				}
 
-                    if (k > 0)
-                    {
-                        this.keepaliveMaxCount = k;
-                    }
-                }
-            }
-        }
+    				if (astring1[0].equals("max"))
+    				{
+    					int k = Config.parseInt(astring1[1], -1);
+
+    					if (k > 0)
+    					{
+    						this.keepaliveMaxCount = k;
+    					}
+    				}
+    			}
+    		}
+    	}
     }
-}
 
-private String[] split(String p_split_1_, char p_split_2_)
-{
-    int i = p_split_1_.indexOf(p_split_2_);
+    private String[] split(String p_split_1_, char p_split_2_)
+    {
+    	int i = p_split_1_.indexOf(p_split_2_);
 
-    if (i < 0)
+    	if (i < 0)
+    	{
+    		return new String[] {p_split_1_};
+    	}
+    	else
+    	{
+    		String s = p_split_1_.substring(0, i);
+    		String s1 = p_split_1_.substring(i + 1);
+    		return new String[] {s, s1};
+    	}
+    }
+
+    public synchronized void onExceptionSend(HttpPipelineRequest p_onExceptionSend_1_, Exception p_onExceptionSend_2_)
     {
-        return new String[] {p_split_1_};
+    	this.terminate(p_onExceptionSend_2_);
     }
-    else
+
+    public synchronized void onExceptionReceive(HttpPipelineRequest p_onExceptionReceive_1_, Exception p_onExceptionReceive_2_)
     {
-        String s = p_split_1_.substring(0, i);
-        String s1 = p_split_1_.substring(i + 1);
-        return new String[] {s, s1};
+    	this.terminate(p_onExceptionReceive_2_);
     }
-}
 
-public synchronized void onExceptionSend(HttpPipelineRequest p_onExceptionSend_1_, Exception p_onExceptionSend_2_)
-{
-    this.terminate(p_onExceptionSend_2_);
-}
-
-public synchronized void onExceptionReceive(HttpPipelineRequest p_onExceptionReceive_1_, Exception p_onExceptionReceive_2_)
-{
-    this.terminate(p_onExceptionReceive_2_);
-}
-
-private synchronized void terminate(Exception p_terminate_1_)
-{
-    if (!this.terminated)
+    private synchronized void terminate(Exception p_terminate_1_)
     {
-        this.terminated = true;
-        this.terminateRequests(p_terminate_1_);
+    	if (!this.terminated)
+    	{
+    		this.terminated = true;
+    		this.terminateRequests(p_terminate_1_);
 
-        if (this.httpPipelineSender != null)
-        {
-            this.httpPipelineSender.interrupt();
-        }
+    		if (this.httpPipelineSender != null)
+    		{
+    			this.httpPipelineSender.interrupt();
+    		}
 
-        if (this.httpPipelineReceiver != null)
-        {
-            this.httpPipelineReceiver.interrupt();
-        }
+    		if (this.httpPipelineReceiver != null)
+    		{
+    			this.httpPipelineReceiver.interrupt();
+    		}
 
-        try
-        {
-            if (this.socket != null)
-            {
-                this.socket.close();
-            }
-        }
-        catch (IOException var3)
-        {
-            ;
-        }
+    		try
+    		{
+    			if (this.socket != null)
+    			{
+    				this.socket.close();
+    			}
+    		}
+    		catch (IOException var3)
+    		{
+    			;
+    		}
 
-        this.socket = null;
-        this.inputStream = null;
-        this.outputStream = null;
+    		this.socket = null;
+    		this.inputStream = null;
+    		this.outputStream = null;
+    	}
     }
-}
 
-private void terminateRequests(Exception p_terminateRequests_1_)
-{
-    if (this.listRequests.size() > 0)
+    private void terminateRequests(Exception p_terminateRequests_1_)
     {
-        if (!this.responseReceived)
-        {
-            HttpPipelineRequest httppipelinerequest = (HttpPipelineRequest)this.listRequests.remove(0);
-            httppipelinerequest.getHttpListener().failed(httppipelinerequest.getHttpRequest(), p_terminateRequests_1_);
-            httppipelinerequest.setClosed(true);
-        }
+    	if (this.listRequests.size() > 0)
+    	{
+    		if (!this.responseReceived)
+    		{
+    			HttpPipelineRequest httppipelinerequest = (HttpPipelineRequest)this.listRequests.remove(0);
+    			httppipelinerequest.getHttpListener().failed(httppipelinerequest.getHttpRequest(), p_terminateRequests_1_);
+    			httppipelinerequest.setClosed(true);
+    		}
 
-        while (this.listRequests.size() > 0)
-        {
-            HttpPipelineRequest httppipelinerequest1 = (HttpPipelineRequest)this.listRequests.remove(0);
-            HttpPipeline.addRequest(httppipelinerequest1);
-        }
+    		while (this.listRequests.size() > 0)
+    		{
+    			HttpPipelineRequest httppipelinerequest1 = (HttpPipelineRequest)this.listRequests.remove(0);
+    			HttpPipeline.addRequest(httppipelinerequest1);
+    		}
+    	}
     }
-}
 
-public synchronized boolean isClosed()
-{
-    return this.terminated ? true : this.countRequests >= this.keepaliveMaxCount;
-}
+    public synchronized boolean isClosed()
+    {
+    	return this.terminated ? true : this.countRequests >= this.keepaliveMaxCount;
+    }
 
-public int getCountRequests()
-{
-    return this.countRequests;
-}
+    public int getCountRequests()
+    {
+    	return this.countRequests;
+    }
 
-public synchronized boolean hasActiveRequests()
-{
-    return this.listRequests.size() > 0;
-}
+    public synchronized boolean hasActiveRequests()
+    {
+    	return this.listRequests.size() > 0;
+    }
 
-public String getHost()
-{
-    return this.host;
-}
+    public String getHost()
+    {
+    	return this.host;
+    }
 
-public int getPort()
-{
-    return this.port;
-}
+    public int getPort()
+    {
+    	return this.port;
+    }
 
-public Proxy getProxy()
-{
-    return this.proxy;
+    public Proxy getProxy()
+    {
+    	return this.proxy;
+    }
 }
-}
