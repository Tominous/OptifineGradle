--- ../src-base/minecraft/net/optifine/entity/model/anim/ExpressionParser.java
+++ ../src-work/minecraft/net/optifine/entity/model/anim/ExpressionParser.java
@@ -244,9 +244,9 @@
 
     private FunctionType getFunctionType(Token token, Deque<Token> deque) throws ParseException
     {
-        Token token = (Token)deque.peek();
+        Token token2 = (Token)deque.peek();
 
-        if (token != null && token.getType() == TokenType.BRACKET_OPEN)
+        if (token2 != null && token.getType() == TokenType.BRACKET_OPEN)
         {
             FunctionType functiontype1 = FunctionType.parse(token.getText());
             checkNull(functiontype1, "Unknown function: " + token);
@@ -280,8 +280,8 @@
         else
         {
             Token token = (Token)deque.poll();
-            Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
-            IExpression[] aiexpression = this.parseExpressions(deque);
+            Deque<Token> deque2 = getGroup(deque, TokenType.BRACKET_CLOSE, true);
+            IExpression[] aiexpression = this.parseExpressions(deque2);
             return makeFunction(type, aiexpression);
         }
     }
@@ -292,8 +292,8 @@
 
         while (true)
         {
-            Deque<Token> deque = getGroup(deque, TokenType.COMMA, false);
-            IExpression iexpression = this.parseInfix(deque);
+            Deque<Token> deque2 = getGroup(deque, TokenType.COMMA, false);
+            IExpression iexpression = this.parseInfix(deque2);
 
             if (iexpression == null)
             {
@@ -365,13 +365,13 @@
 
     private IExpression makeBracketed(Token token, Deque<Token> deque) throws ParseException
     {
-        Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
-        return this.parseInfix(deque);
+        Deque<Token> deque2 = getGroup(deque, TokenType.BRACKET_CLOSE, true);
+        return this.parseInfix(deque2);
     }
 
     private static Deque<Token> getGroup(Deque<Token> deque, TokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException
     {
-        Deque<Token> deque = new ArrayDeque();
+        Deque<Token> deque2 = new ArrayDeque();
         int i = 0;
         Iterator iterator = deque.iterator();
 
@@ -382,10 +382,10 @@
 
             if (i == 0 && token.getType() == tokenTypeEnd)
             {
-                return deque;
+                return deque2;
             }
 
-            deque.add(token);
+            deque2.add(token);
 
             if (token.getType() == TokenType.BRACKET_OPEN)
             {
@@ -404,7 +404,7 @@
         }
         else
         {
-            return deque;
+            return deque2;
         }
     }
 
